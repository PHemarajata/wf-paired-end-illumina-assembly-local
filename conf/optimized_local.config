/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Optimized Local Configuration for High-Performance Workstation
    System: 22 cores, 64GB RAM
    Optimized resource allocation with system overhead
    Supports both Docker and Singularity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Override max resource parameters for local high-performance system
params {
    max_cpus   = 20    // Leave 2 cores for system overhead
    max_memory = '56.GB' // Leave 8GB for system overhead  
    max_time   = '48.h'  // Reasonable time limit for local runs
    
    // Options to disable Kraken classification
    skip_kraken1 = false  // Set to true to skip Kraken1 classification
    skip_kraken2 = false  // Set to true to skip Kraken2 classification
    skip_kraken  = false  // Set to true to skip both Kraken1 and Kraken2
    
    // Database caching directories (persistent across runs)
    database_cache_dir = "${HOME}/.nextflow_cache/databases"
    blast_cache_dir    = "${HOME}/.nextflow_cache/blast"
    kraken_cache_dir   = "${HOME}/.nextflow_cache/kraken"
    checkm2_cache_dir  = "${HOME}/.nextflow_cache/checkm2"
    
    // Hostile configuration - fix permission issues
    hostile_data_dir   = "${projectDir}/work/hostile_data"
}

// Container configuration - supports both Docker and Singularity
if (params.use_singularity) {
    singularity {
        enabled = true
        autoMounts = true
        cacheDir = "${HOME}/.nextflow_cache/singularity"
        runOptions = "--bind ${HOME}/.nextflow_cache/databases:/opt/databases"
        runOptions = "${singularity.runOptions} --bind ${HOME}/.nextflow_cache/blast:/opt/blast"
        runOptions = "${singularity.runOptions} --bind ${HOME}/.nextflow_cache/kraken:/opt/kraken"
    }
} else {
    docker {
        enabled = true
        fixOwnership = true
        runOptions = "-u \$(id -u):\$(id -g)"
        // Increase shared memory for processes that need it
        runOptions = "${docker.runOptions} --shm-size=8g"
        // Allow access to more memory if needed
        runOptions = "${docker.runOptions} --ulimit memlock=-1:-1"
        // Mount cache directories for persistent database storage
        runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/databases:/opt/databases"
        runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/blast:/opt/blast"
        runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/kraken:/opt/kraken"
        // Fix hostile permission issues
        runOptions = "${docker.runOptions} -v \${PWD}/work/hostile_data:/tmp/hostile_data"
        runOptions = "${docker.runOptions} --env HOME=/tmp"
    }
}

// Process resource allocation optimized for bacterial genome assembly
process {
    // Default resources for lightweight processes
    cpus   = 2
    memory = '4.GB'
    time   = '2.h'
    
    // Error handling
    errorStrategy = 'retry'
    maxRetries = 3
    
    // Resource allocation by process labels
    withLabel: 'process_single' {
        cpus   = 1
        memory = '2.GB'
        time   = '1.h'
    }
    
    withLabel: 'process_low' {
        cpus   = 2
        memory = '4.GB'
        time   = '2.h'
    }
    
    withLabel: 'process_medium' {
        cpus   = 6
        memory = '12.GB'
        time   = '4.h'
    }
    
    withLabel: 'process_high' {
        cpus   = 12
        memory = '24.GB'
        time   = '8.h'
    }
    
    withLabel: 'process_long' {
        cpus   = 4
        memory = '8.GB'
        time   = '24.h'
    }
    
    withLabel: 'process_high_memory' {
        cpus   = 8
        memory = '32.GB'
        time   = '8.h'
    }
    
    // Specific optimizations for computationally intensive processes
    
    // Assembly processes (SPAdes/SKESA) - these are typically the most resource-intensive
    withName: 'ASSEMBLE_CONTIGS_SPADES' {
        cpus   = 18
        memory = '48.GB'
        time   = '12.h'
    }
    
    withName: 'ASSEMBLE_CONTIGS_SKESA' {
        cpus   = 12
        memory = '24.GB'
        time   = '8.h'
    }
    
    // Annotation processes
    withName: 'ANNOTATE_PROKKA' {
        cpus   = 8
        memory = '16.GB'
        time   = '6.h'
    }
    
    // Quality assessment
    withName: 'ASSESS_ASSEMBLY_QUAST' {
        cpus   = 4
        memory = '8.GB'
        time   = '2.h'
    }
    
    // Taxonomic classification - can be memory intensive
    withName: 'READ_CLASSIFY_KRAKEN_ONE' {
        cpus   = 10
        memory = '24.GB'
        time   = '4.h'
    }
    
    withName: 'READ_CLASSIFY_KRAKEN_TWO' {
        cpus   = 10
        memory = '24.GB'
        time   = '4.h'
    }
    
    // CheckM2 for genome quality assessment
    withName: 'ASSESS_ASSEMBLY_CHECKM2' {
        cpus   = 10
        memory = '20.GB'
        time   = '6.h'
    }
    
    // GTDB-Tk classification (if enabled) - very memory intensive
    withName: 'CLASSIFY_GTDBTK' {
        cpus   = 16
        memory = '40.GB'
        time   = '12.h'
    }
    
    // CAT classification
    withName: 'CLASSIFY_CAT' {
        cpus   = 8
        memory = '16.GB'
        time   = '6.h'
    }
    
    // BUSCO assessment
    withName: 'ASSESS_ASSEMBLY_BUSCO' {
        cpus   = 8
        memory = '12.GB'
        time   = '4.h'
    }
    
    // Read trimming and preprocessing
    withName: 'TRIM_READS_TRIMMOMATIC' {
        cpus   = 6
        memory = '8.GB'
        time   = '3.h'
    }
    
    // Host removal processes - fix hostile issues
    withName: 'REMOVE_HOST_HOSTILE' {
        cpus   = 6
        memory = '12.GB'
        time   = '4.h'
        containerOptions = "--env HOME=/tmp --env HOSTILE_DATA_DIR=/tmp/hostile_data"
    }
    
    withName: 'REMOVE_HOST_READS_SRA_HUMAN_SCRUBBER' {
        cpus   = 6
        memory = '12.GB'
        time   = '4.h'
    }
    
    withName: 'REMOVE_HOST_READS_BBTOOLS_BBDUK' {
        cpus   = 6
        memory = '12.GB'
        time   = '4.h'
    }
    
    // BLAST processes
    withName: 'ALIGN_16S_BLAST' {
        cpus   = 8
        memory = '12.GB'
        time   = '3.h'
    }
    
    // FastQC and MultiQC - lightweight
    withName: 'FASTQC' {
        cpus   = 2
        memory = '4.GB'
        time   = '1.h'
    }
    
    withName: 'MULTIQC' {
        cpus   = 2
        memory = '4.GB'
        time   = '1.h'
    }
    
    // Subsampling processes
    withName: 'SUBSAMPLE_READS_SEQTK' {
        cpus   = 2
        memory = '4.GB'
        time   = '2.h'
    }
    
    withName: 'SUBSAMPLE_READS_SEQKIT' {
        cpus   = 2
        memory = '4.GB'
        time   = '2.h'
    }
}

// Executor configuration for local execution
executor {
    name = 'local'
    cpus = 20
    memory = '56.GB'
    // Allow reasonable queue size for parallel execution
    queueSize = 12
}

// Fix Java heap size environment variables - proper syntax
env {
    NXF_OPTS = '-Xms4g -Xmx12g'
    // Fix hostile permission issues
    HOSTILE_DATA_DIR = "${projectDir}/work/hostile_data"
    HOME = '/tmp'
}