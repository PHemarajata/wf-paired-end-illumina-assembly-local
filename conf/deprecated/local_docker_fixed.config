/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Fixed Local Docker Configuration for High-Performance Workstation
    System: 22 cores, 64GB RAM
    FIXES: Missing bin/ directory mount and bash_functions.sh access
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Override max resource parameters for local high-performance system
params {
    max_cpus   = 20    // Leave 2 cores for system overhead
    max_memory = '56.GB' // Leave 8GB for system overhead  
    max_time   = '48.h'  // Reasonable time limit for local runs
    
    // Database caching directories (persistent across runs)
    database_cache_dir = "${HOME}/.nextflow_cache/databases"
    blast_cache_dir    = "${HOME}/.nextflow_cache/blast"
    kraken_cache_dir   = "${HOME}/.nextflow_cache/kraken"
    checkm2_cache_dir  = "${HOME}/.nextflow_cache/checkm2"
}

// Docker configuration optimized for local workstation
docker {
    enabled = true
    fixOwnership = true
    runOptions = "-u \$(id -u):\$(id -g)"
    // Increase shared memory for processes that need it
    runOptions = "${docker.runOptions} --shm-size=8g"
    // Allow access to more memory if needed
    runOptions = "${docker.runOptions} --ulimit memlock=-1:-1"
    // Mount cache directories for persistent database storage
    runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache:/cache"
    runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/databases:/opt/databases"
    runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/blast:/opt/blast"
    runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/kraken:/opt/kraken"
    runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/checkm2:/opt/checkm2"
    runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/busco:/opt/busco"
    runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/gtdb:/opt/gtdb"
    runOptions = "${docker.runOptions} -v \${HOME}/.nextflow_cache/cat:/opt/cat"
}

// Process resource allocation optimized for bacterial genome assembly
process {
    // Default resources for lightweight processes
    cpus   = 2
    memory = '4.GB'
    time   = '2.h'
    
    // Error handling
    errorStrategy = 'retry'
    maxRetries = 3
    
    // CRITICAL FIX: Make bash_functions.sh available in all containers
    beforeScript = '''
    # Copy bash_functions.sh to current directory if it doesn't exist
    if [ ! -f "bash_functions.sh" ] && [ -f "${projectDir}/bin/bash_functions.sh" ]; then
        cp "${projectDir}/bin/bash_functions.sh" .
    fi
    '''
    
    // Resource allocation by process labels
    withLabel: 'process_single' {
        cpus   = 1
        memory = '2.GB'
        time   = '1.h'
    }
    
    withLabel: 'process_low' {
        cpus   = 2
        memory = '4.GB'
        time   = '2.h'
    }
    
    withLabel: 'process_medium' {
        cpus   = 6
        memory = '12.GB'
        time   = '4.h'
    }
    
    withLabel: 'process_high' {
        cpus   = 12
        memory = '24.GB'
        time   = '8.h'
    }
    
    withLabel: 'process_long' {
        cpus   = 4
        memory = '8.GB'
        time   = '24.h'
    }
    
    withLabel: 'process_high_memory' {
        cpus   = 8
        memory = '32.GB'
        time   = '8.h'
    }
    
    // Specific optimizations for computationally intensive processes
    
    // Assembly processes (SPAdes/SKESA) - these are typically the most resource-intensive
    withName: 'ASSEMBLE_CONTIGS_SPADES' {
        cpus   = 16
        memory = '40.GB'
        time   = '12.h'
    }
    
    withName: 'ASSEMBLE_CONTIGS_SKESA' {
        cpus   = 12
        memory = '24.GB'
        time   = '8.h'
    }
    
    // Annotation processes
    withName: 'ANNOTATE_PROKKA' {
        cpus   = 8
        memory = '16.GB'
        time   = '6.h'
    }
    
    // Quality assessment
    withName: 'ASSESS_ASSEMBLY_QUAST' {
        cpus   = 4
        memory = '8.GB'
        time   = '2.h'
    }
    
    // Taxonomic classification - can be memory intensive
    withName: 'READ_CLASSIFY_KRAKEN_ONE' {
        cpus   = 8
        memory = '20.GB'
        time   = '4.h'
    }
    
    withName: 'READ_CLASSIFY_KRAKEN_TWO' {
        cpus   = 8
        memory = '20.GB'
        time   = '4.h'
    }
    
    // CheckM2 for genome quality assessment
    withName: 'ASSESS_ASSEMBLY_CHECKM2' {
        cpus   = 8
        memory = '16.GB'
        time   = '6.h'
    }
    
    // GTDB-Tk classification (if enabled) - very memory intensive
    withName: 'CLASSIFY_GTDBTK' {
        cpus   = 12
        memory = '32.GB'
        time   = '12.h'
    }
    
    // CAT classification
    withName: 'CLASSIFY_CAT' {
        cpus   = 8
        memory = '16.GB'
        time   = '6.h'
    }
    
    // BUSCO assessment
    withName: 'ASSESS_ASSEMBLY_BUSCO' {
        cpus   = 8
        memory = '12.GB'
        time   = '4.h'
    }
    
    // Read trimming and preprocessing
    withName: 'TRIM_READS_TRIMMOMATIC' {
        cpus   = 4
        memory = '8.GB'
        time   = '3.h'
    }
    
    // Host removal processes
    withName: 'REMOVE_HOST_READS_SRA_HUMAN_SCRUBBER' {
        cpus   = 6
        memory = '12.GB'
        time   = '4.h'
    }
    
    withName: 'REMOVE_HOST_READS_BBTOOLS_BBDUK' {
        cpus   = 6
        memory = '12.GB'
        time   = '4.h'
    }
    
    // BLAST processes
    withName: 'ALIGN_16S_BLAST' {
        cpus   = 6
        memory = '8.GB'
        time   = '3.h'
    }
    
    // FastQC and MultiQC - lightweight
    withName: 'FASTQC' {
        cpus   = 2
        memory = '4.GB'
        time   = '1.h'
    }
    
    withName: 'MULTIQC' {
        cpus   = 2
        memory = '4.GB'
        time   = '1.h'
    }
    
    // Subsampling processes
    withName: 'SUBSAMPLE_READS_SEQTK' {
        cpus   = 2
        memory = '4.GB'
        time   = '2.h'
    }
    
    withName: 'SUBSAMPLE_READS_SEQKIT' {
        cpus   = 2
        memory = '4.GB'
        time   = '2.h'
    }
}

// Executor configuration for local execution
executor {
    name = 'local'
    cpus = 20
    memory = '56.GB'
    // Allow reasonable queue size for parallel execution
    queueSize = 10
}

// Increase Java heap size for Nextflow
env {
    NXF_OPTS = '-Xms2g -Xmx8g'
}